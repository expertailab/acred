#
# Copyright (c) 2020 Expert System Iberia
#
"""Provides methods for parsing and formating iso 8601 dates
"""
import datetime
from dateutil import parser
import logging
import re


logger = logging.getLogger(__name__)


def now_utc_timestamp():
    dt = datetime.datetime.utcnow()
    return as_utc_timestamp(dt)


def as_utc_timestamp(dt):
    """Converts a `datetime` object into a UTC timestamp string

    :param dt: a `datetime` as generated by the `datetime` library
    :returns: timestamp with format 'YYYY-MM-ddThh:mm:ss.microsecsZ'
    :rtype: str
    """
    if type(dt) == float:
        # assume timestamp
        # print('converting timestamp', dt, 'onto datetime')
        dt = datetime.datetime.fromtimestamp(dt)
    if type(dt) == datetime.date:
        dt = datetime.datetime.combine(dt, datetime.datetime.min.time())
    assert type(dt) == datetime.datetime, 'Should be datetime, but is %s' % (
        type(dt))
    # print('converting dt', dt, type(dt), 'onto utc iso format')
    utc_dt = dt.replace(tzinfo=datetime.timezone.utc)
    return utc_dt.isoformat().replace('+00:00', 'Z')


def start_of_week_utc_timestamp(dt):
    """Returns the utc timestap for the start of the week for dt

    :param dt: a `datetime` instance
    :returns: a UTC iso str date for the start of the week for dt
    :rtype: str
    """
    start = dt - datetime.timedelta(
        days=dt.weekday(),  # start of week
        hours=dt.hour,  # strip any time data
        minutes=dt.minute,
        seconds=dt.second,
        microseconds=dt.microsecond)
    return as_utc_timestamp(start)


# adapted from https://stackoverflow.com/questions/41129921/validate-an-iso-8601-datetime-string-in-python
iso8601_regex = '^%s-%s-%sT%s:%s:%s%s?%s?$' % (
    '(-?(?:[1-9][0-9]*)?[0-9]{4})',  # YYYY
    '(1[0-2]|0[1-9])',  # MM
    '(3[01]|0[1-9]|[12][0-9])',  # dd
    '(2[0-3]|[01][0-9])',  # hh
    '([0-5][0-9])',  # mm
    '([0-5][0-9])',  # ss
    '(\.[0-9]+)',  # microsecs
    '(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])'  # timezone
)

iso8601_matcher = re.compile(iso8601_regex).match


def is_valid_iso8601_dt(dt_str):
    try:
        if iso8601_matcher(dt_str) is not None:
            return True
    except Exception as e:
        logger.warning('Invalid dt %s' % (dt_str))
    return False


def parse_iso8601_dt(dt_str):
    return parser.isoparse(dt_str)

